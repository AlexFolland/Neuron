<Ui xmlns="http://www.blizzard.com/wow/ui/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

	<!-- Neuron Menu Bar, a World of WarcraftÂ® user interface addon. -->
	<!-- CopyrightÂ© 2006-2014 Connor H. Chenoweth, aka Maul - All rights reserved. -->

	<Button name="NeuronCharacterButton" inherits="MainMenuBarMicroButton" parent="UIParent">
		<Layers>
			<Layer level="OVERLAY">
				<Texture name="$parentPortrait">
					<Size x="18" y="25"/>
					<Anchors>
						<Anchor point="TOP">
							<Offset x="0" y="-28"/>
						</Anchor>
					</Anchors>
					<TexCoords left="0.2" right="0.8" top="0.0666" bottom="0.9"/>
				</Texture>
			</Layer>
		</Layers>
		<Scripts>
			<OnLoad>
				Neuron.CharacterButton_OnLoad(self)
			</OnLoad>
			<OnMouseDown>
				if ( self.down ) then
					self.down = nil
					ToggleCharacter("PaperDollFrame")
					return
				end
				Neuron.CharacterButton_SetPushed(self)
				self.down = 1
			</OnMouseDown>
			<OnMouseUp>
				if ( self.down ) then
					self.down = nil;
					if ( self:IsMouseOver() ) then
						ToggleCharacter("PaperDollFrame");
					end
					Neuron.updateMicroButtons();
					return;
				end
				if ( self:GetButtonState() == "NORMAL" ) then
					Neuron.CharacterMicroButton_SetPushed();
					self.down = 1;
				else
					Neuron.CharacterMicroButton_SetNormal();
					self.down = 1;
				end
			</OnMouseUp>
			<OnEvent>
				Neuron.CharacterButton_OnEvent(self, event, ...)
			</OnEvent>
		</Scripts>
	</Button>

	<Button name="NeuronSpellbookButton" inherits="SecureActionButtonTemplate, MainMenuBarMicroButton" parent="UIParent">
		<Scripts>
			<OnLoad>
				self:SetAttribute("type", "macro")
				self:SetAttribute("*macrotext*", "/click SpellbookMicroButton")
				LoadMicroButtonTextures(self, "Spellbook")
				Neuron.AddMenuElement(self)
			</OnLoad>
			<OnEnter>
				self.tooltipText = MicroButtonTooltipText(_G.SPELLBOOK_ABILITIES_BUTTON, "TOGGLESPELLBOOK")
				GameTooltip_AddNewbieTip(self, self.tooltipText, 1.0, 1.0, 1.0, _G.NEWBIE_TOOLTIP_SPELLBOOK)
			</OnEnter>
		</Scripts>
	</Button>

	<Button name="NeuronTalentButton" inherits="SecureActionButtonTemplate, MainMenuBarMicroButton" parent="UIParent">
		<Scripts>
			<OnLoad>
				LoadMicroButtonTextures(self, "Talents")

				--self:SetAttribute("type", "macro")
				--self:SetAttribute("*macrotext*", "/click TalentMicroButton")

				self.tooltipText = MicroButtonTooltipText(_G.TALENTS_BUTTON, "TOGGLETALENTS")
				self.newbieText = _G.NEWBIE_TOOLTIP_TALENTS

				self.minLevel = SHOW_SPEC_LEVEL
				self:RegisterEvent("PLAYER_LEVEL_UP")
				self:RegisterEvent("UPDATE_BINDINGS")
				self:RegisterEvent("PLAYER_TALENT_UPDATE")
				self:RegisterEvent("PLAYER_SPECIALIZATION_CHANGED")
				self:RegisterEvent("PLAYER_CHARACTER_UPGRADE_TALENT_COUNT_CHANGED")

				self:RegisterEvent("UNIT_LEVEL")
				Neuron.AddMenuElement(self)

				Neuron.CreateAnimationLayer(self)
			</OnLoad>
			<OnShow>
				if (IsKioskModeEnabled() and select(2, UnitClass("player") ~= "DEMONHUNTER")) then
					self:Disable();
				end
			</OnShow>
			<OnEvent>
				Neuron.TalentButton_OnEvent(self, event, ...)
			</OnEvent>
			<OnClick>
				ToggleTalentFrame()
			</OnClick>
		</Scripts>
	</Button>

	<Button name="NeuronAchievementButton" inherits="MainMenuBarMicroButton" parent="UIParent">
		<Scripts>
			<OnLoad>
				LoadMicroButtonTextures(self, "Achievement")
				self:RegisterEvent("RECEIVED_ACHIEVEMENT_LIST")
				self:RegisterEvent("ACHIEVEMENT_EARNED")
				self:RegisterEvent("UPDATE_BINDINGS")
				self:RegisterEvent("PLAYER_ENTERING_WORLD")
				self.tooltipText = MicroButtonTooltipText(_G.ACHIEVEMENT_BUTTON, "TOGGLEACHIEVEMENT")
				self.newbieText = _G.NEWBIE_TOOLTIP_ACHIEVEMENT
				self.minLevel = 10	--Just used for display. But we know that it will become available by level 10 due to the level 10 achievement.
				Neuron.AddMenuElement(self)
				if (IsKioskModeEnabled()) then
					self:Disable();
				end
			</OnLoad>
			<OnShow>
				if (IsKioskModeEnabled()) then
					self:Disable();
				end
			</OnShow>
			<OnEvent>
				Neuron.AchievementButton_OnEvent(self, event, ...)
			</OnEvent>
			<OnClick>
				ToggleAchievementFrame()
			</OnClick>

		</Scripts>
	</Button>

	<Button name="NeuronQuestLogButton" inherits="MainMenuBarMicroButton" parent="UIParent">
		<Scripts>
			<OnLoad>
				LoadMicroButtonTextures(self, "Quest")
				self.tooltipText = MicroButtonTooltipText(_G.QUESTLOG_BUTTON, "TOGGLEQUESTLOG")
				self.newbieText = _G.NEWBIE_TOOLTIP_QUESTLOG
				Neuron.AddMenuElement(self)
			</OnLoad>
			<OnEvent>
				self.tooltipText = MicroButtonTooltipText(_G.QUESTLOG_BUTTON, "TOGGLEQUESTLOG")
			</OnEvent>
			<OnClick>
				ToggleQuestLog()
			</OnClick>
		</Scripts>
	</Button>

	<Button name="NeuronGuildButton" inherits="SecureActionButtonTemplate, MainMenuBarMicroButton" parent="UIParent">
		<Frames>
			<Frame name="$parentTabard" parentKey="tabard" hidden="true">
				<Size x="28" y="58"/>
				<Anchors>
					<Anchor point="TOPLEFT"/>
				</Anchors>
				<Layers>
					<Layer level="ARTWORK">
						<Texture name="$parentBackground" file="Interface\Buttons\UI-MicroButton-Guild-Banner" parentKey="background">
							<Size x="30" y="60"/>
							<Anchors>
								<Anchor point="CENTER" x="0" y="0"/>
							</Anchors>
						</Texture>
					</Layer>
					<Layer level="OVERLAY" textureSubLevel="1">
						<Texture name="$parentEmblem" parentKey="emblem" file="Interface\GuildFrame\GuildEmblems_01">
							<Size x="16" y="16"/>
							<Anchors>
								<Anchor point="CENTER" x="0" y="-9"/>
							</Anchors>
						</Texture>
					</Layer>
				</Layers>
			</Frame>
		</Frames>
		<Scripts>
			<OnLoad>
				self:SetAttribute("type", "macro")
				self:SetAttribute("*macrotext*", "/click GuildMicroButton")

				LoadMicroButtonTextures(self, "Socials")
				self.tooltipText = MicroButtonTooltipText(_G.LOOKINGFORGUILD, "TOGGLEGUILDTAB")
				self.newbieText = _G.NEWBIE_TOOLTIP_LOOKINGFORGUILDTAB
				self:RegisterEvent("UPDATE_BINDINGS")
				self:RegisterEvent("PLAYER_GUILD_UPDATE")
				self:RegisterEvent("NEUTRAL_FACTION_SELECT_RESULT")
				Neuron.updateTabard(true)
				if ( IsTrialAccount() or (IsVeteranTrialAccount() and not IsInGuild()) ) then
					self:Disable()
					self.disabledTooltip = _G.ERR_RESTRICTED_ACCOUNT_TRIAL
				end
				if (IsKioskModeEnabled()) then
					self:Disable();
				end
				Neuron.AddMenuElement(self)
			</OnLoad>
			<OnShow>
				if (IsKioskModeEnabled()) then
					self:Disable();
				end
			</OnShow>
			<OnEvent>
				Neuron.GuildButton_OnEvent(self, event, ...)
			</OnEvent>
		</Scripts>
	</Button>
	<Button name="NeuronLFDButton" inherits="MainMenuBarMicroButton" parent="UIParent">
		<Scripts>
			<OnLoad>
				LoadMicroButtonTextures(self, "LFG")
				SetDesaturation(self:GetDisabledTexture(), true)
				self.tooltipText = MicroButtonTooltipText(_G.DUNGEONS_BUTTON, "TOGGLEGROUPFINDER")
				self.newbieText = _G.NEWBIE_TOOLTIP_LFGPARENT
				self.minLevel = math.min(_G.SHOW_LFD_LEVEL, _G.SHOW_PVP_LEVEL)
				if (IsKioskModeEnabled()) then
					self:Disable();
				end
				Neuron.AddMenuElement(self)
			</OnLoad>
			<OnShow>
				if (IsKioskModeEnabled()) then
					self:Disable();
				end
			</OnShow>
			<OnEvent>
				if (IsKioskModeEnabled()) then
					return;
				end
				self.tooltipText = MicroButtonTooltipText(_G.DUNGEONS_BUTTON, "TOGGLEGROUPFINDER")
				self.newbieText = _G.NEWBIE_TOOLTIP_LFGPARENT

				Neuron.updateMicroButtons()
			</OnEvent>
			<OnClick>
				PVEFrame_ToggleFrame()
			</OnClick>
		</Scripts>
	</Button>

	<Button name="NeuronCollectionsButton" inherits="SecureActionButtonTemplate, MainMenuBarMicroButton" parent="UIParent">
		<Scripts>
			<OnLoad>
				self:SetAttribute("type", "macro")
				self:SetAttribute("*macrotext*", "/click CollectionsMicroButton")
				LoadMicroButtonTextures(self, "Mounts")
				SetDesaturation(self:GetDisabledTexture(), true)
				self.tooltipText = MicroButtonTooltipText(_G.COLLECTIONS, "TOGGLECOLLECTIONS")
				self.newbieText = _G.NEWBIE_TOOLTIP_MOUNTS_AND_PETS

				self:RegisterEvent("HEIRLOOMS_UPDATED")
				self:RegisterEvent("PET_JOURNAL_NEW_BATTLE_SLOT")
				self:RegisterEvent("TOYS_UPDATED")

				Neuron.AddMenuElement(self)
				Neuron.CreateAnimationLayer(self)
			</OnLoad>
			<OnEvent>
				Neuron.CollectionsButton_OnEvent(self, event, ...)
			</OnEvent>
		</Scripts>
	</Button>

	<Button name="NeuronEJButton" inherits="MainMenuBarMicroButton" parent="UIParent">
		<Frames>
			<Frame parentKey="NewAdventureNotice" hidden="true">
				<Size x="28" y="28"/>
				<Anchors>
					<Anchor point="RIGHT" x="8" y="2"/>
				</Anchors>
				<Layers>
					<Layer level="OVERLAY" setAllPoints="true">
						<Texture  atlas="adventureguide-microbutton-alert"/>
					</Layer>
				</Layers>
			</Frame>
		</Frames>
		<Scripts>
			<OnLoad>
				Neuron.EJButton_OnLoad(self)
			</OnLoad>
			<OnShow>
				if (IsKioskModeEnabled()) then
					self:Disable();
				end
			</OnShow>
			<OnEvent>
				Neuron.EJButton_OnEvent(self, event, ...)
			</OnEvent>
			<OnClick>
				ToggleEncounterJournal()
			</OnClick>
		</Scripts>
	</Button>

	<Button name="NeuronStoreButton" inherits="MainMenuBarMicroButton" parent="UIParent">
		<Scripts>
			<OnLoad>
				LoadMicroButtonTextures(self, "BStore")
				self.tooltipText = _G.BLIZZARD_STORE
				self:RegisterEvent("STORE_STATUS_CHANGED")
								if (IsKioskModeEnabled()) then
					self:Disable();
				end
				Neuron.AddMenuElement(self)
			</OnLoad>
			<OnShow>
				if (IsKioskModeEnabled()) then
					self:Disable();
				end
			</OnShow>
			<OnEvent>
				Neuron.updateMicroButtons()
				if (IsKioskModeEnabled()) then
					self:Disable();
				end
			</OnEvent>
			<OnClick function="ToggleStoreUI"/>
		</Scripts>
	</Button>

	<!-- I have borrowed the latency button from LedMirage to be the Neuron default latency indicator -->
	<!-- LedMirage 11/27/2006 New Frame for MirageUI Latency Button -->

	<Button name="NeuronLatencyButton" parent="UIParent" hidden="true">
		<Size>
			<AbsDimension x="28" y="58"/>
		</Size>
		<HitRectInsets>
			<AbsInset left="0" right="0" top="18" bottom="0"/>
		</HitRectInsets>
		<Layers>
			<Layer level="OVERLAY">
				<Texture name="$parentOverlay" file="Interface\AddOns\Neuron-Menu\Images\MirageUI_LatencyMicroButton_Overlay">
					<Anchors>
						<Anchor point="CENTER">
							<Offset x="0" y="0"/>
						</Anchor>
					</Anchors>
				</Texture>
				<Texture name="NEURONMainMenuBarDownload" file="Interface\BUTTONS\UI-MicroStream-Yellow" hidden="true">
					<Size>
						<AbsDimension x="28" y="28"/>
					</Size>
					<Anchors>
						<Anchor point="BOTTOM" relativeTo="NeuronLatencyButton" relativePoint="BOTTOM">
							<Offset x="0" y="7"/>
						</Anchor>
					</Anchors>
				</Texture>
			</Layer>
		</Layers>
		<Scripts>
			<OnLoad>
				Neuron.LatencyButton_OnLoad(self)
			</OnLoad>
			<OnEvent>
				Neuron.LatencyButton_OnEvent(self, event, ...)
			</OnEvent>
			<OnClick>
				Neuron.LatencyButton_OnClick(self, button, down)
			</OnClick>
			<OnEnter>
				Neuron.LatencyButton_OnEnter(self)
			</OnEnter>
			<OnLeave>
				Neuron.LatencyButton_OnLeave(self)
			</OnLeave>
			<OnUpdate>
				if (self.updateInterval > 0) then
					self.updateInterval = self.updateInterval - elapsed
				else
					self.updateInterval = PERFORMANCEBAR_UPDATE_INTERVAL
					status = _G.GetFileStreamingStatus()
					if(status==0) then
						status = (GetBackgroundLoadingStatus()~=0) and 1 or 0
					end
					if(status == 0) then
						NEURONMainMenuBarDownload:Hide()
						--self:SetNormalTexture("Interface\\Buttons\\UI-MicroButton-MainMenu-Up")
						--self:SetPushedTexture("Interface\\Buttons\\UI-MicroButton-MainMenu-Down")
						--self:SetDisabledTexture("Interface\\Buttons\\UI-MicroButton-MainMenu-Disabled")
					else
						--self:SetNormalTexture("Interface\\Buttons\\UI-MicroButtonStreamDL-Up")
						--self:SetPushedTexture("Interface\\Buttons\\UI-MicroButtonStreamDL-Down")
						--self:SetDisabledTexture("Interface\\Buttons\\UI-MicroButtonStreamDL-Up")
						if (status == 1) then
							NEURONMainMenuBarDownload:SetTexture("Interface\\BUTTONS\\UI-MicroStream-Green")
						elseif (status == 2) then
							NEURONMainMenuBarDownload:SetTexture("Interface\\BUTTONS\\UI-MicroStream-Yellow")
						elseif (status == 3) then
							NEURONMainMenuBarDownload:SetTexture("Interface\\BUTTONS\\UI-MicroStream-Red")
						end
						NEURONMainMenuBarDownload:SetDrawLayer("OVERLAY", 3)
						NEURONMainMenuBarDownload:Show()
					end
					local bandwidthIn, bandwidthOut, latencyHome, latencyWorld = GetNetStats()
					local latency = latencyHome > latencyWorld and latencyHome or latencyWorld
					if (latency > _G.PERFORMANCEBAR_MEDIUM_LATENCY) then
						self.overlay:SetVertexColor(1, 0, 0)
					elseif (latency > _G.PERFORMANCEBAR_LOW_LATENCY) then
						self.overlay:SetVertexColor(1, 1, 0)
					else
						self.overlay:SetVertexColor(0, 1, 0)
					end
					if (self.hover) then
						MainMenuBarPerformanceBarFrame_OnEnter(self) --Neuron.LatencyButton_OnEnter(self)
					end
					if (self.enabled) then

						UpdateAddOnCPUUsage()
						UpdateAddOnMemoryUsage()

						self.lastUsage = self.currUsage or 0

						self.currUsage = GetScriptCPUUsage()

						self.usage = self.currUsage - self.lastUsage
					end
				end
			</OnUpdate>
		</Scripts>
		<NormalTexture file="Interface\AddOns\Neuron-Menu\Images\MirageUI_LatencyMicroButton_Frame"/>
		<HighlightTexture file="Interface\Buttons\UI-MicroButton-Hilight" alphaMode="ADD"/>
		<PushedTexture file="Interface\AddOns\Neuron-Menu\Images\MirageUI_LatencyMicroButton_FramePushed"/>
		<CheckedTexture file="Interface\Buttons\UI-MicroButton-Hilight" alphaMode="ADD"/>
	</Button>

	<!-- <Button name="NeuronHelpButton" inherits="MainMenuBarMicroButton" parent="UIParent" hidden="true">
		<Scripts>
			<OnLoad>
				LoadMicroButtonTextures(self, "Help")
				self.tooltipText = _G.HELP_BUTTON
				self.newbieText = _G.NEWBIE_TOOLTIP_HELP
				Neuron.AddMenuElement(self)
				if (IsKioskModeEnabled()) then
					self:Disable();
				end
			</OnLoad>
			<OnClick function="ToggleHelpFrame"/>
		</Scripts>
	</Button> -->

	<Frame name="NeuronTalentMicroButtonAlert" inherits="MicroButtonAlertTemplate">
		<Anchors>
			<Anchor point="BOTTOM" relativeTo="NeuronTalentButton" relativePoint="TOP" x="0" y="-8"/>
		</Anchors>
		<Scripts>
			<OnLoad>
				_G.MicroButtonAlert_OnLoad(self)
				self.Text:SetText(_G.TALENT_MICRO_BUTTON_SPEC_TUTORIAL)
			</OnLoad>
			<OnShow>
				Neuron.CheckAlertPosition(self, NeuronTalentButton)
			</OnShow>
			<OnUpdate>
				Neuron.CheckAlertPosition(self, NeuronTalentButton)
			</OnUpdate>
		</Scripts>
	</Frame>
	<Frame name="NeuronCollectionsMicroButtonAlert" inherits="MicroButtonAlertTemplate">
		<Anchors>
			<Anchor point="BOTTOM" relativeTo="NeuronCollectionsButton" relativePoint="TOP" x="0" y="-8"/>
		</Anchors>
		<Scripts>
			<OnLoad>
				_G.MicroButtonAlert_OnLoad(self)
			</OnLoad>
			<OnShow>
				Neuron.CheckAlertPosition(self, NeuronCollectionsButton)
			</OnShow>
			<OnUpdate>
				Neuron.CheckAlertPosition(self, NeuronCollectionsButton)
			</OnUpdate>
		</Scripts>
	</Frame>
	<Frame name="NeuronLFDMicroButtonAlert" inherits="MicroButtonAlertTemplate">
		<Anchors>
			<Anchor point="BOTTOM" relativeTo="NeuronLFDButton" relativePoint="TOP" x="0" y="-8"/>
		</Anchors>
		<Scripts>
			<OnLoad>
				MicroButtonAlert_OnLoad(self)
				self.Text:SetText(_G.LFG_MICRO_BUTTON_SPEC_TUTORIAL)
			</OnLoad>
			<OnShow>
				Neuron.CheckAlertPosition(self, NeuronLFDMicroButtonAlert)
			</OnShow>
			<OnUpdate>
				Neuron.CheckAlertPosition(self, NeuronLFDMicroButtonAlert)
			</OnUpdate>
		</Scripts>
	</Frame>

	<Frame name="NeuronEJMicroButtonAlert" inherits="MicroButtonAlertTemplate">
		<Anchors>
			<Anchor point="BOTTOM" relativeTo="NeuronEJButton" relativePoint="TOP" x="0" y="-8"/>
		</Anchors>
		<Scripts>
			<OnLoad>
				MicroButtonAlert_OnLoad(self)
				self.Text:SetText(_G.AJ_MICRO_BUTTON_ALERT_TEXT)
			</OnLoad>
			<OnShow>
				Neuron.CheckAlertPosition(self, NeuronEJButton)
			</OnShow>
			<OnUpdate>
				Neuron.CheckAlertPosition(self, NeuronEJButton)
			</OnUpdate>
		</Scripts>
	</Frame>

	<GameTooltip name="NeuronMenuBarTooltip" inherits="GameTooltipTemplate" parent="UIParent" enableMouse="true" toplevel="true" movable="true" frameStrata="TOOLTIP" hidden="true">
		<Size x="128" y="64"/>
		<Anchors>
			<Anchor point="BOTTOMRIGHT">
				<Offset x="150" y="80"/>
			</Anchor>
		</Anchors>
		<Frames>
			<Button name="ItemRefCloseButton">
				<Size x="32" y="32"/>
				<Anchors>
					<Anchor point="TOPRIGHT">
						<Offset x="1" y="0"/>
					</Anchor>
				</Anchors>
				<Scripts>
					<OnClick>
						self:GetParent():Hide()
						self.wasShown = nil
						NeuronLatencyButton.hover = nil
					</OnClick>
				</Scripts>
				<NormalTexture file="Interface\Buttons\UI-Panel-MinimizeButton-Up"/>
				<PushedTexture file="Interface\Buttons\UI-Panel-MinimizeButton-Down"/>
				<HighlightTexture file="Interface\Buttons\UI-Panel-MinimizeButton-Highlight" alphaMode="ADD"/>
			</Button>
		</Frames>
		<Scripts>
			<OnLoad>
				GameTooltip_OnLoad(self)
				self:SetPadding(16,16)
				self:RegisterForDrag("LeftButton")
			</OnLoad>
			<OnDragStart>
				self:StartMoving()
			</OnDragStart>
			<OnDragStop>
				self:StopMovingOrSizing()
			</OnDragStop>
		</Scripts>
	</GameTooltip>
</Ui>
